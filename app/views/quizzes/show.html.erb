<p id="note" style="text-align:center">
    <script src="http://code.jquery.com/jquery-1.7.1.min.js"></script>
    <script>
$(function(){
  
  var note = $('#note'),
    ts = new Date(2012, 0, 1),
    newYear = true;
  
  if((new Date()) > ts){
    // The new year is here! Count towards something else.
    // Notice the *1000 at the end - time must be in milliseconds
    ts = (new Date()).getTime() + 1*15*1000;
  }
    
  $('#countdown').countdown({
    timestamp : ts,
    callback  : function(minutes, seconds){
      
      var message = "Your answers will be submitted in ";
      
      message += minutes + " minute" + ( minutes==1 ? '':'s' ) + " and ";
      message += seconds + " second" + ( seconds==1 ? '':'s' ) + "!";
      
      note.html(message);
    }
  });
  
});

    </script> 
    <script>
    
(function($){
  
  // Number of seconds in every time division
  var minutes = 60;
    
  
  // Creating the plugin
  $.fn.countdown = function(prop){
    
    var options = $.extend({
      callback  : function(){},
      timestamp : 0
    },prop);
    
    var left, d, h, m, s, positions;

    // Initialize the plugin
    init(this, options);
    
    positions = this.find('.position');
    
    (function tick(){
      
      // Time left
      left = Math.floor((options.timestamp - (new Date())) / 1000);
      
      if(left < 0){
        left = 0;
        score();
      }
      
      // Number of minutes left
      m = Math.floor(left / minutes);
      updateDuo(4, 5, m);
      left -= m*minutes;
      
      // Number of seconds left
      s = left;
      updateDuo(6, 7, s);
      
      // Calling an optional user supplied callback
      options.callback(m, s);
      
      // Scheduling another call of this function in 1s
      setTimeout(tick, 1000);
    })();
    
    // This function updates two digit positions at once
    function updateDuo(minor,major,value){
      switchDigit(positions.eq(minor),Math.floor(value/10)%10);
      switchDigit(positions.eq(major),value%10);
    }
    
    return this;
  };

  function init(elem, options){
    elem.addClass('countdownHolder');
  }

  // Creates an animated transition between the two numbers
  function switchDigit(position,number){
    
    var digit = position.find('.digit')
    
    if(digit.is(':animated')){
      return false;
    }
    
    if(position.data('digit') == number){
      // We are already showing this number
      return false;
    }
    
    position.data('digit', number);
    
    var replacement = $('<span>',{
      'class':'digit',
      css:{
        top:'-2.1em',
        opacity:0
      },
      html:number
    });
    
    // The .static class is added when the animation
    // completes. This makes it run smoother.
    
    digit
      .before(replacement)
      .removeClass('static')
      .animate({top:'2.5em',opacity:0},'fast',function(){
        digit.remove();
      })

    replacement
      .delay(100)
      .animate({top:0,opacity:1},'fast',function(){
        replacement.addClass('static');
      });
  }
})(jQuery);  
    </script>
      
    </p>

<p id="notice"><%= notice %></p>

<p>
  <strong>Title:</strong>
  <%= @quiz.title %>
</p>
<%= form_tag({:action => "grading"}) do %>
<ol>
	<% for question in @quiz.questions %>
		<li>
			<%=h question.content %>
			<ul>
				<% for answer in question.answers %>
					<li>
						<%= radio_button_tag("answer[#{question.id}]", answer.id) %>
						<%=h answer.content %>
					</li>
				<% end %>
			</ul>
		</li>
	<% end %>
</ol>

<%= hidden_field_tag :quiz_id, @quiz.id %>

<div><%= submit_tag("Submit", :class => "submit") %></div>
<% end %>
<p>
	<%= link_to 'Back', quizzes_path %>
	<%= link_to 'Edit', edit_quiz_path(@quiz) %>
</p>